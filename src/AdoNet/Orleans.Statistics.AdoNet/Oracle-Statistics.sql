CREATE TABLE "ORLEANSSTATISTICSTABLE"
   (
    "ORLEANSSTATISTICSTABLEID" NUMBER(*,0),
    "DEPLOYMENTID" NVARCHAR2(150) NOT NULL ENABLE,
    "TIMESTAMP" TIMESTAMP (6) DEFAULT sys_extract_utc(systimestamp) NOT NULL ENABLE,
    "ID" NVARCHAR2(250) NOT NULL ENABLE,
    "HOSTNAME" NVARCHAR2(150) NOT NULL ENABLE,
    "NAME" NVARCHAR2(150) NOT NULL ENABLE,
    "ISVALUEDELTA" NUMBER(*,0) NOT NULL ENABLE,
    "STATVALUE" NVARCHAR2(1024),
    "STATISTIC" NVARCHAR2(512) NOT NULL ENABLE,
     CONSTRAINT "ORLEANSSTATISTICSTABLE_PK" PRIMARY KEY ("ORLEANSSTATISTICSTABLEID")
   );
/

CREATE SEQUENCE "ORLEANSSTATISTICSTABLE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE;

CREATE OR REPLACE TRIGGER "ORLEANSSTATISTICSTABLE_TRG"
BEFORE INSERT ON ORLEANSSTATISTICSTABLE
FOR EACH ROW
BEGIN
  <<COLUMN_SEQUENCES>>
  BEGIN
    IF INSERTING AND :NEW.ORLEANSSTATISTICSTABLEID IS NULL THEN
      SELECT ORLEANSSTATISTICSTABLE_SEQ.NEXTVAL INTO :NEW.ORLEANSSTATISTICSTABLEID FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END;
/
ALTER TRIGGER "ORLEANSSTATISTICSTABLE_TRG" ENABLE;

CREATE TABLE "ORLEANSCLIENTMETRICSTABLE"
(
    "DEPLOYMENTID" VARCHAR2(150 BYTE) NOT NULL ENABLE,
    "CLIENTID" VARCHAR2(150 BYTE) NOT NULL ENABLE,
    "TIMESTAMP" TIMESTAMP (6) DEFAULT sys_extract_utc(systimestamp) NOT NULL ENABLE,
    "ADDRESS" VARCHAR2(45 BYTE) NOT NULL ENABLE,
    "HOSTNAME" NVARCHAR2(150) NOT NULL ENABLE,
    "CPUUSAGE" FLOAT(126) NOT NULL ENABLE,
    "MEMORYUSAGE" NUMBER(19,0) NOT NULL ENABLE,
    "SENDQUEUELENGTH" NUMBER(*,0) NOT NULL ENABLE,
    "RECEIVEQUEUELENGTH" NUMBER(*,0) NOT NULL ENABLE,
    "SENTMESSAGES" NUMBER(19,0) NOT NULL ENABLE,
    "RECEIVEDMESSAGES" NUMBER(19,0) NOT NULL ENABLE,
    "CONNECTEDGATEWAYCOUNT" NUMBER(19,0) NOT NULL ENABLE,

     CONSTRAINT "ORLEANSCLIENTMETRICSTABLE_PK" PRIMARY KEY ("DEPLOYMENTID", "CLIENTID")
);
/

CREATE TABLE "ORLEANSSILOMETRICSTABLE"
(
    "DEPLOYMENTID" NVARCHAR2(150) NOT NULL ENABLE,
    "SILOID" NVARCHAR2(150) NOT NULL ENABLE,
    "TIMESTAMP" TIMESTAMP (6) DEFAULT sys_extract_utc(systimestamp) NOT NULL ENABLE,
    "ADDRESS" VARCHAR2(45 BYTE) NOT NULL ENABLE,
    "PORT" NUMBER(*,0) NOT NULL ENABLE,
    "GENERATION" NUMBER(*,0) NOT NULL ENABLE,
    "HOSTNAME" NVARCHAR2(150) NOT NULL ENABLE,
    "GATEWAYADDRESS" VARCHAR2(45 BYTE) NOT NULL ENABLE,
    "GATEWAYPORT" NUMBER(*,0) NOT NULL ENABLE,
    "CPUUSAGE" FLOAT(126) NOT NULL ENABLE,
    "MEMORYUSAGE" NUMBER(19,0) NOT NULL ENABLE,
    "SENDQUEUELENGTH" NUMBER(*,0) NOT NULL ENABLE,
    "RECEIVEQUEUELENGTH" NUMBER(*,0) NOT NULL ENABLE,
    "SENTMESSAGES" NUMBER(19,0) NOT NULL ENABLE,
    "RECEIVEDMESSAGES" NUMBER(19,0) NOT NULL ENABLE,
    "ACTIVATIONCOUNT" NUMBER(*,0) NOT NULL ENABLE,
    "RECENTLYUSEDACTIVATIONCOUNT" NUMBER(*,0) NOT NULL ENABLE,
    "REQUESTQUEUELENGTH" NUMBER(19,0) NOT NULL ENABLE,
    "ISOVERLOADED" NUMBER(*,0) NOT NULL ENABLE,
    "CLIENTCOUNT" NUMBER(19,0) NOT NULL ENABLE,

    CONSTRAINT "ORLEANSSILOMETRICSTABLE_PK" PRIMARY KEY ("DEPLOYMENTID", "SILOID"),
    CONSTRAINT "ORLEANSSILOMETRICSTABLE_FK1" FOREIGN KEY ("DEPLOYMENTID")
);
/

CREATE OR REPLACE FUNCTION UpsertReportClientMetrics(PARAM_DEPLOYMENTID IN VARCHAR2, PARAM_HOSTNAME IN NVARCHAR2, PARAM_CPUUSAGE IN FLOAT, PARAM_MEMORYUSAGE IN NUMBER,
                                                        PARAM_SENDQUEUELENGTH IN NUMBER, PARAM_RECEIVEQUEUELENGTH IN NUMBER, PARAM_SENTMESSAGES IN NUMBER,
                                                        PARAM_RECEIVEDMESSAGES IN NUMBER, PARAM_CONNECTEDGATEWAYCOUNT IN NUMBER, PARAM_CLIENTID IN VARCHAR2,
                                                        PARAM_ADDRESS IN VARCHAR2)
RETURN NUMBER IS
  rowcount NUMBER;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    UPDATE OrleansClientMetricsTable
      SET
        Timestamp = sys_extract_utc(systimestamp),
        Address = PARAM_ADDRESS,
        HostName = PARAM_HOSTNAME,
        CpuUsage = PARAM_CPUUSAGE,
        MemoryUsage = PARAM_MEMORYUSAGE,
        SendQueueLength = PARAM_SENDQUEUELENGTH,
        ReceiveQueueLength = PARAM_RECEIVEQUEUELENGTH,
        SentMessages = PARAM_SENTMESSAGES,
        ReceivedMessages = PARAM_RECEIVEDMESSAGES,
        ConnectedGatewayCount = PARAM_CONNECTEDGATEWAYCOUNT
      WHERE DeploymentId = PARAM_DEPLOYMENTID AND PARAM_DEPLOYMENTID IS NOT NULL
        AND ClientId = PARAM_CLIENTID AND PARAM_CLIENTID IS NOT NULL;

      rowcount := SQL%ROWCOUNT;

      IF rowcount = 1 THEN
        COMMIT;
        RETURN(1);
      END IF;

     INSERT INTO OrleansClientMetricsTable
     (
        DeploymentId,
        ClientId,
        Address,
        HostName,
        CpuUsage,
        MemoryUsage,
        SendQueueLength,
        ReceiveQueueLength,
        SentMessages,
        ReceivedMessages,
        ConnectedGatewayCount
    )
    SELECT
      PARAM_DEPLOYMENTID,
      PARAM_CLIENTID,
      PARAM_ADDRESS,
      PARAM_HOSTNAME,
      PARAM_CPUUSAGE,
      PARAM_MEMORYUSAGE,
      PARAM_SENDQUEUELENGTH,
      PARAM_RECEIVEQUEUELENGTH,
      PARAM_SENTMESSAGES,
      PARAM_RECEIVEDMESSAGES,
      PARAM_CONNECTEDGATEWAYCOUNT
    FROM DUAL;

    COMMIT;
    RETURN(1);
  END;
/

CREATE OR REPLACE FUNCTION UpsertSiloMetrics(PARAM_DEPLOYMENTID IN NVARCHAR2, PARAM_HOSTNAME IN NVARCHAR2, PARAM_CPUUSAGE IN FLOAT, PARAM_MEMORYUSAGE IN NUMBER, PARAM_SENDQUEUELENGTH IN NUMBER,
                                                PARAM_RECEIVEQUEUELENGTH IN NUMBER, PARAM_SENTMESSAGES IN NUMBER, PARAM_RECEIVEDMESSAGES IN NUMBER, PARAM_ACTIVATIONCOUNT IN NUMBER, PARAM_RECENTLYUSEDACTIVATIONS IN NUMBER,
                                                PARAM_REQUESTQUEUELENGHT IN NUMBER, PARAM_ISOVERLOADED IN NUMBER, PARAM_CLIENTCOUNT IN NUMBER, PARAM_ADDRESS IN VARCHAR2,
                                                PARAM_PORT IN NUMBER, PARAM_GENERATION IN NUMBER, PARAM_GATEWAYADDRESS IN VARCHAR2, PARAM_GATEWAYPORT IN NUMBER, PARAM_SILOID IN NVARCHAR2)
RETURN NUMBER IS
  rowcount NUMBER;
  PRAGMA AUTONOMOUS_TRANSACTION;
  BEGIN
    UPDATE OrleansSiloMetricsTable
    SET
      Timestamp = sys_extract_utc(systimestamp),
      Address = PARAM_ADDRESS,
      Port = PARAM_PORT,
      Generation = PARAM_GENERATION,
      HostName = PARAM_HOSTNAME,
      GatewayAddress = PARAM_GATEWAYADDRESS,
      GatewayPort = PARAM_GATEWAYPORT,
      CpuUsage = PARAM_CPUUSAGE,
      MemoryUsage = PARAM_MEMORYUSAGE,
      ActivationCount = PARAM_ACTIVATIONCOUNT,
      RecentlyUsedActivationCount = PARAM_RECENTLYUSEDACTIVATIONS,
      SendQueueLength = PARAM_SENDQUEUELENGTH,
      ReceiveQueueLength = PARAM_RECEIVEQUEUELENGTH,
      RequestQueueLength = PARAM_REQUESTQUEUELENGHT,
      SentMessages = PARAM_SENTMESSAGES,
      ReceivedMessages = PARAM_RECEIVEDMESSAGES,
      IsOverloaded = PARAM_ISOVERLOADED,
      ClientCount = PARAM_CLIENTCOUNT
    WHERE
      DeploymentId = PARAM_DEPLOYMENTID AND PARAM_DEPLOYMENTID IS NOT NULL
        AND SiloId = PARAM_SILOID AND PARAM_SILOID IS NOT NULL;

      rowcount := SQL%ROWCOUNT;

      IF rowcount = 1 THEN
        COMMIT;
        RETURN(1);
      END IF;

     INSERT INTO OrleansSiloMetricsTable
     (
        DeploymentId,
        SiloId,
        Address,
        Port,
        Generation,
        HostName,
        GatewayAddress,
        GatewayPort,
        CpuUsage,
        MemoryUsage,
        SendQueueLength,
        ReceiveQueueLength,
        SentMessages,
        ReceivedMessages,
        ActivationCount,
        RecentlyUsedActivationCount,
        RequestQueueLength,
        IsOverloaded,
        ClientCount
      )
      SELECT
        PARAM_DEPLOYMENTID,
        PARAM_SILOID,
        PARAM_ADDRESS,
        PARAM_PORT,
        PARAM_GENERATION,
        PARAM_HOSTNAME,
        PARAM_GATEWAYADDRESS,
        PARAM_GATEWAYPORT,
        PARAM_CPUUSAGE,
        PARAM_MEMORYUSAGE,
        PARAM_SENDQUEUELENGTH,
        PARAM_RECEIVEQUEUELENGTH,
        PARAM_SENTMESSAGES,
        PARAM_RECEIVEDMESSAGES,
        PARAM_ACTIVATIONCOUNT,
        PARAM_RECENTLYUSEDACTIVATIONS,
        PARAM_REQUESTQUEUELENGHT,
        PARAM_ISOVERLOADED,
        PARAM_CLIENTCOUNT
      FROM DUAL;

    COMMIT;
    RETURN(1);
  END;
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
    'InsertOrleansStatisticsKey','
BEGIN
    INSERT INTO OrleansStatisticsTable
    (
        DeploymentId,
        Id,
        HostName,
        Name,
        IsValueDelta,
        StatValue,
        Statistic
    )
    SELECT :DeploymentId, :Id, :HostName, :Name, :IsValueDelta, :StatValue, :Statistic FROM DUAL;
END;
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
    'UpsertReportClientMetricsKey','
      SELECT UpsertReportClientMetrics(:DEPLOYMENTID, :HOSTNAME, :CPUUSAGE, :MEMORYUSAGE,
                                                        :SENDQUEUELENGTH, :RECEIVEQUEUELENGTH, :SENTMESSAGES,
                                                        :RECEIVEDMESSAGES, :CONNECTEDGATEWAYCOUNT, :CLIENTID, :ADDRESS) AS RESULT FROM DUAL
');
/

INSERT INTO OrleansQuery(QueryKey, QueryText)
VALUES
(
    'UpsertSiloMetricsKey','
  SELECT UpsertSiloMetrics(:DEPLOYMENTID, :HOSTNAME, :CPUUSAGE, :MEMORYUSAGE, :SENDQUEUELENGTH,
                                                :RECEIVEQUEUELENGTH, :SENTMESSAGES, :RECEIVEDMESSAGES, :ACTIVATIONCOUNT, :RECENTLYUSEDACTIVATIONCOUNT,
                                                :REQUESTQUEUELENGTH, :ISOVERLOADED, :CLIENTCOUNT, :ADDRESS,
                                                :PORT, :GENERATION, :GATEWAYADDRESS, :GATEWAYPORT, :SILOID) AS RESULT FROM DUAL
');
/

COMMIT;
